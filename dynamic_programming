
Minimum path in a triangle:
    [  [4],
      [1,2],
     [8,10,6],
    [12,6,5,2],
    ]
  We are given a triangle and we want to find the sum of minimum path starting from 1st row to last row.
  In the example above the path is 4->2 (not 1)->6->2. From 1 we can jump to 8 or 10 and not 6 in 3rd row.

Answer:
    We need to look at this problem in bottom-up instead of top down. ie start from last row and calculate the cost
    at each row.
    In the last row 8 can choose min(12,6), 10 can choose min(6,5) and 6 can choose min(5,2)
    so 3rd row has total costs as
       [8,10,6]
       +
       [6,5,2]
       =========
       [14,15,8]

    2rd row now has this choice of costs of 3rd row [14,15,8]
    [1,2]
    [14,15,8]
    which is really
    [1,2]
    +
    [14,8]
    =========
    [15, 10]

    so 1st row when it looks down sees two costs path
    [4]
    [15,10] so it will select min(15,10) = 10
    [4]
    +
    [10]
    ======
    [14]
    so the min path will have cost 14
================================================================================================================================

Longest increasing subsequence:
    [10,22,9,33,21,50,41,60,80]

Answer:
    The approach we take is that at each index what is the longest subsequence ending at that index.
     j       i
    [10,22,9,33,21,50,41,60,80]
         j   i
    [10,22,9,33,21,50,41,60,80]
           j i
    [10,22,9,33,21,50,41,60,80]

    Initialize the result array as LIS -> [1,1,1,1,1,1,1,1,1]. The initial value is 1 as each integer is the longest subsequence including itself
    so it is at-least 1. example: the longest subsequence of 9 is 1 (including 9) and excluding 10,22

    Longest subsequence ending at index 0 is 1 [10] # LIS [1,1,1,1,1,1,1,1,1]
    Longest subsequence ending at index 1 is 2 [10,22] # LIS [1,2,1,1,1,1,1,1,1]
    Longest subsequence ending at index 2 is 1 [9] # LIS [1,2,1,1,1,1,1,1,1]
    Longest subsequence ending at index 3 is 3 [10,22,33] # LIS [1,2,1,3,1,1,1,1,1]
    Longest subsequence ending at index 4 is 2 [10,21] or [9,21] # LIS [1,2,1,3,2,1,1,1,1]
    Longest subsequence ending at index 5 is 4 [10,22,33,50] # LIS [1,2,1,3,2,4,1,1,1]
    Longest subsequence ending at index 6 is 4 [10,22,33,41] # LIS [1,2,1,3,2,4,4,1,1]
    Longest subsequence ending at index 7 is 5 [10,22,33,50,60] # LIS [1,2,1,3,2,4,4,5,1]
    Longest subsequence ending at index 8 is 6 [10,22,33,50,60,80] # LIS [1,2,1,3,2,4,4,5,6]

    LIS = [1,1,1,1,1,1]
    i = 0
    while i < len(A):
        seq = []
        j = 0
        while j < i:
            if A[i] > A[j]:
                seq.append(LIS[j]
            j+=1
        LIS[i] = max(seq) + LIS[i]
        i+=1

===================================================================================================

Score Combinations:
In football, player can score 2 pointer, 3 pointer or 5 pointer, how many ways can score 12 be reached.

Answer:
         -----------------------------------------------------
        | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |
        ------------------------------------------------------
    2   | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 |  1 | 0  | 1  |
        ------------------------------------------------------
  2,3   | 1 | 0 | 1 | 1 | 1 | 1 | 2 | 1 | 2 | 2 | 2  | 2  | 3  |
        ------------------------------------------------------
  2,3,5 | 1 | 0 | 1 | 1 | 1 | 2 | 2 | 2 | 3 | 3 | 4  | 4  | 5  |
        ------------------------------------------------------

With 2
    We can reach 1 by using 2 in 0 ways
    We can reach 2 by using 2 in 1 ways path is [2]
    We can reach 3 by using 2 in 0 ways
    We can reach 4 by using 2 in 1 ways  path is [2, 2] or A[4-2]
    We can reach 5 by using 2 in 0 ways
    We can reach 6 by using 2 in 1 ways path is [2,2,2] or A[6-2]
    We can reach 7 by using 2 in 0 ways
    We can reach 8 by using 2 in 1 ways path is [2,2,2,2] or A[8-2]
    We can reach 9 by using 2 in 0 ways
    We can reach 10 by using 2 in 1 ways path is [2,2,2,2,2] or A[10-2]
    We can reach 11 by using 2 in 0 ways
    We can reach 12 by using 2 in 1 ways path is [2,2,2,2,2] or A[12-2]

With 2 & 3
                        with 3      + without 3
    We can reach 1 by     0         +  0            = 0 ways
    We can reach 2 by     0         +  A[1][2] #1   = 1 ways
    We can reach 3 by  A[2][3-3] #1 +  A[1][3] #0   = 1 ways  #We put 0 for easy computation. We can reach 3 by using 3 in 1 way. It is just denoted programatically easily using A[2][0] which is set to 1
    We can reach 4 by  A[2][4-3] #0 +  A[1][4] #1   = 1 ways
    We can reach 5 by  A[2][5-3] #1 +  A[1][5] #0   = 1 ways
    We can reach 6 by  A[2][6-3] #1 +  A[1][6] #1   = 2 ways
    We can reach 7 by  A[2][7-3] #1 +  A[1][7] #0   = 1 ways
    We can reach 8 by  A[2][8-3] #1 +  A[1][8] #1   = 2 ways
    We can reach 9 by  A[2][9-3] #2 +  A[1][9] #0   = 2 ways
    We can reach 10 by A[2][10-3]#1 +  A[1][10]#1   = 2 ways
    We can reach 11 by A[2][11-3]#2 +  A[1][11]#0   = 2 ways
    We can reach 12 by A[2][12-3]#2 +  A[1][12]#1   = 3 ways


with 2,3 & 5
                        with 5      + without 5
    We can reach 1 by     0         +  0            = 0 ways
    We can reach 2 by     0         +  A[2][2] #1   = 1 ways
    We can reach 3 by     0         +  A[2][3] #1   = 1 ways
    We can reach 4 by     0         +  A[2][4] #1   = 1 ways
    We can reach 5 by  A[3][5-5] #1 +  A[2][5] #1   = 2 ways #We put 0 for easy computation. We can reach 5 by using 5 in 1 way. It is just denoted programatically easily using A[3][0] which is set to 1
    We can reach 6 by  A[3][6-5] #0 +  A[2][6] #2   = 2 ways
    We can reach 7 by  A[3][7-5] #1 +  A[2][7] #1   = 2 ways
    We can reach 8 by  A[3][8-5] #1 +  A[2][8] #2   = 2 ways
    We can reach 9 by  A[3][9-5] #1 +  A[2][9] #2   = 3 ways
    We can reach 10 by A[3][10-5]#2 +  A[2][10]#2   = 4 ways [[2,2,2,2,2],[2,3,2,3],[2,3,5],[5,5]]
    We can reach 11 by A[3][11-5]#2 +  A[2][11]#2   = 4 ways
    We can reach 12 by A[3][12-5]#2 +  A[2][12]#3   = 5 ways [[2,2,2,2,2,2],[3,3,2,2,2],[3,3,3,3],[2,3,5,2],[5,5,2]]

====================================================================================================
"""
#Bed Bath & Beyond problem or Word-Break problem:
#If you are given a word "Iamace", can you split this word into smaller words
#for example: I, am, ace
#"Ihfjd" cannot be split into any smaller words
#
#Answer:
#    Since this is dynamic programming, we have to build the solution from smallest unit.
#    ie what if I, a, m, a, c ,e are words.
#    Then what if Ia, am, ac, ce can be split into words
#    Then what if Iam, ama, mac, ace can be split into words.
#    These are either words themselves or they can be split into words.
#    example: Iam is not a word but it can be split into I, am both of which are words.
#    The earlier iterations can help calculate that I & am are words.

            | I | a | m | a | c | e |
         ------------------------------
          I | T | F | T | T | F | T |
         ------------------------------
          a | F | T | T | T | F | T |
         ------------------------------
          m |   |   | F | F | F | F |
         ------------------------------
          a |   |   |   | T | F | T |
         ------------------------------
          c |   |   |   |   | F | F |
         ------------------------------
          e |   |   |   |   |   | F |
         ------------------------------
"""

