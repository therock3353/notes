
Permutations:
    If we are given an input such as [1,2,3] then return all permutations of the sequence i.e
    [
        [1,2,3],
        [1,3,2],
        [2,1,3],
        [2,3,1],
        [3,1,2],
        [3,2,1]
    ]

    ----------------------------------------------------------------------------------------
    |       1                   |           2                       |           3           |
    ----------------------------------------------------------------------------------------
selected: 1  |  pass to next:       selected: 2 |  pass to next:     selected: 3 |     pass to next:
      ------------ [2,3]             ---------------- [1,3]                 -------------   [1,2]
      |          |                   |              |                       |           |
     ----       ----                ------        ------                   ----        ----
    | 2  |     |  3 |               | 1  |        |  3  |                  | 1 |       | 2 |
     ----      ------               ------        ------                   -----       -----
selected:2      selected: 3           selected:1    selected:3                  [2]         [1]
pass to next: [3]   pass to next:[2]   pass to next:[3]   pass to next:[1]
[1,2,3]             [1,3,2]             [2,1,3]             [2,3,1]             [3,1,2]     [3,2,1]

    We iterate through the array and in each iteration we select only 1 element to be added into result.
    We pass all the other elements to be processed in the next iteration by calling the same function
    with other elements as input.

    def permutations(self, numbers, len_of_orig_seq, result, results)

        if len(result) == len_of_orig_seq:
            results.append(result)
            return

        for i, number in enumerate(numbers):
            selected_num = number
            result = result + [selected_num]
            other_unselected_numbers = numbers[:i]+numbers[i+1:]
            self.permutations(other_unselected_numbers, len_of_orig_seq, result, results)
