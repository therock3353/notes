# Array needs to be sorted
# Operational Complexity log(n)

# The only thing from implementation perspective you have to remember is
# that when calling the binary_search recursively,
# if x > A[mid_pt] then left = mid_pt + 1
# if x < A[mid_pt] then right = mid_pt - 1

def binary_search_recursive(data, x, left, right):
    if left > right:
        return -1

    mid_pt = (left + right)/2
    if x == data[mid_pt]:
        return x
    elif x > data[mid_pt]:
        return binary_search_recursive(data, x, mid_pt+1, right)
    elif x < data[mid_pt]:
        return binary_search_recursive(data, x, left, mid_pt-1)

def binary_search_iterative(A, x):
    l = 0
    r = len(A)-1
    while l <= r:
        mid_pt = (l+r)/2
        if x == A[mid_pt]:
            return x
        elif x > A[mid_pt]:
            l = mid_pt + 1
        else:
            r = mid_pt - 1
    return -1


# Variant:
#     1. Start from 0 and in a sorted array, multiply by 2.
#     look for target value at index 1
#     look for target value at index 2
#     look for target value at index 4
#     look for target value at index 8
#     look for target value at index 16

def binary_search_window(A, x):
    start_pt = -1
    last = len(A)-1
    index = 1

    while index <= last:
        #If A[index] > target means you have gone too ahead and need to come back
        #In below example if you are looking for 2 at index 11 and you went to index 16 then
        #come back to 12 from 16 using linear comparision.
        while A[index] > x:
            index -= 1
        if x == A[index]:
            #just checking the starting point of target value
            while index > 0 and A[index] == A[index-1]:
                index -= 1
            start_pt = index
            break
        #For each step double the index to check the target value in sorted array if A[index] == target for index = 1,2,4,8,16,32...
        index = index * 2
    return start_pt

d = [0,0,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4]
x = 2
print binary_search_window(d, x)
